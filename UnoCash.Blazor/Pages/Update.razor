@page "/edit/{Id}"

@using System.Globalization
@using System.Reflection
@using System.Text
@using System.Text.Json.Serialization
@using UnoCash.Dto
@using UnoCash.Shared
@inject HttpClient Http
@inject IJSRuntime Js

@if (Guid == Guid.Empty)
{
    <h1>Add an expense</h1>
}
else
{
    <h1>Edit the expense @Id</h1>
}

<FormGroup>
    <BlazorLabel For="Receipt">Upload a receipt</BlazorLabel>
    <input id="Receipt" type="file" />
    <BlazorButton onclick="@UploadToBlobStorage">Load from receipt</BlazorButton>
</FormGroup>

<BlazorForm OnSubmit="@AddOrUpdate">

    <FormGroup>
        <BlazorLabel For="Payee">Payee</BlazorLabel>
        <BlazorInput Id="Payee"
                     InputType="InputType.Text"
                     @bind-Value="_expense.Payee" />
    </FormGroup>

    <FormGroup>
        <BlazorLabel For="Date">Date</BlazorLabel>
        @*<input Id="Date" @bind="_expense.Date" @bind:format="yyyy-MM-dd" />*@
        <BlazorInput Id="Date"
                     InputType="InputType.Date"
                     @bind-Value="DateBinder" />
    </FormGroup>

    <FormGroup>
        <BlazorLabel For="Amount">Amount</BlazorLabel>
        @*<BlazorInput Id="Amount"
            InputType="InputType.Number"
            Value="@_expense.Amount.ToString(CultureInfo.InvariantCulture)"
            @onchange="@(e => _expense.Amount = decimal.Parse(e.Value.ToString()))" />*@
        <BlazorInput Id="Amount"
                     InputType="InputType.Number"
                     @bind-Value="AmountBinder"
                     step=".01" />
    </FormGroup>

    <FormGroup>
        <BlazorLabel For="Account">Account</BlazorLabel>
        <BlazorInput Id="Account"
                     InputType="InputType.Select"
                     @bind-Value="_expense.Account">
            <option>Current</option>
            <option>ISA</option>
            <option>Wallet</option>
        </BlazorInput>
    </FormGroup>

    <FormGroup>
        <BlazorLabel For="Type">Type</BlazorLabel>
        <BlazorInput Id="Type"
                     InputType="InputType.Select"
                     @bind-Value="_expense.Type">
            <option>Regular</option>
            <option>Internal transfer</option>
            <option>Scheduled</option>
        </BlazorInput>
    </FormGroup>

    <FormGroup>
        <BlazorLabel For="Status">Status</BlazorLabel>
        <BlazorInput Id="Status"
                     InputType="InputType.Select"
                     @bind-Value="_expense.Status">
            <option>New</option>
            <option>Pending</option>
            <option>Reconciled</option>
        </BlazorInput>
    </FormGroup>

    <FormGroup>
        <BlazorLabel For="Description">Description</BlazorLabel>
        <BlazorInput Id="Description"
                     InputType="InputType.TextArea"
                     @bind-Value="_expense.Description"
                     Rows="4" />
    </FormGroup>

    <BlazorButton Color="Color.Primary"
                  ButtonType="ButtonType.Submit">@(Guid == Guid.Empty ? "Add" : "Update")</BlazorButton>

                <BlazorButton Color="Color.Secondary">Split</BlazorButton>

            </BlazorForm>

@functions
{
    Task UploadToBlobStorage() =>
        Js.InvokeAsync<object>("uploadToBlobStorage", 
                               DotNetObjectRef.Create(this),
                               "receipts", // Get from config
                               nameof(OnBlobUploaded),
                               nameof(GetSasToken),
                               Assembly.GetAssembly(GetType()).GetName().Name);

    [JSInvokable]
    public static Task<string> GetSasToken()
    {
        // Get SAS token from Azure Function

        const string token = 
            "?st=2019-07-13T10%3A01%3A33Z&se=2026-07-14T10%3A01%3A00Z&" +
            "sp=racwdl&sv=2018-03-28&" +
            "sr=c&" +
            "sig=F1jpNFt4H0ujsGqCaeIZiwWwKXEAV7YE4WPxhkvcd4A%3D";

        return Task.FromResult(token);
    }

    [JSInvokable]
    public async Task OnBlobUploaded(string blobName)
    {
        var url =
            $"http://localhost:7071/api/GetReceiptData?blobName={blobName}";

        var receipt =
            await Http.GetJsonAsync<Receipt>(url);

        _expense.Payee = receipt.Payee;
        AmountBinder = receipt.Amount.ToString(CultureInfo.InvariantCulture);
        DateBinder = receipt.Date.ToString(CultureInfo.InvariantCulture);

        StateHasChanged();
    }

    [Parameter]
    string Id
    {
        get => Guid.ToString();
        set => Guid = Guid.Parse(value);
    }

    Guid Guid { get; set; }

    // If I remove the new Expense, I get a null exception, probably OnInitAsync happens after the binding
    // Do that BEFORE the binding
    Expense _expense = new Expense();

    protected override async Task OnInitAsync() =>
        _expense =
            Guid == Guid.Empty ?
                new Expense
                {
                    Date = DateTime.Today,
                    Amount = 99,
                    Account = "Current",
                    Type = "Regular",
                    Status = "New",
                    Description = ""
                } :
            (await Http.GetJsonAsync<Expense[]>($"http://localhost:7071/api/GetExpenses?account=Current&id={Id}")).Single();


    string AmountBinder
    {
        get => _expense.Amount.ToString(CultureInfo.InvariantCulture);
        set => _expense.Amount = decimal.TryParse(value, out var result) ? result : 0;
    }

    string DateBinder
    {
        get => _expense.Date.ToString("yyyy-MM-dd");
        set => _expense.Date = DateTime.TryParse(value, out var result) ? result : DateTime.Today;
    }

    static HttpRequestMessage CreatePatchRequest(Expense expense) =>
        new HttpRequestMessage(new HttpMethod("PATCH"), "http://localhost:7071/api/UpdateExpense")
        {
            Content = new StringContent(JsonSerializer.ToString(expense), Encoding.UTF8, "application/json")
        };

    Task AddOrUpdate()
    {
        Console.WriteLine(JsonSerializer.ToString(_expense, new JsonSerializerOptions { WriteIndented = true }));

        _expense.Id = Guid;

        return Guid == Guid.Empty ?
               Http.PostJsonAsync($"http://localhost:7071/api/{Constants.AddFunction}", _expense) :
               Http.SendAsync(CreatePatchRequest(_expense));
    }
}
