@page "/fetchdata"
@using UnoCash.Shared
@inject HttpClient Http

<h1>Expenses</h1>

<p>Expenses for the account: Current</p>

@if (_expenses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Payee</th>
                <th>Amount</th>
                <th>Description</th>
                <th>Status</th>
                <th>Delete</th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in _expenses)
            {
                <tr>
                    <td>@expense.Date.ToShortDateString()</td>
                    <td>@expense.Payee</td>
                    <td>@expense.Amount</td>
                    <td>@expense.Description</td>
                    <td>@expense.Status</td>
                    <td><BSButton OnClick="@(() => Delete(expense))">X</BSButton> </td>
                    @*<td><form action="/?id=@expense.Id"><input type="submit" value="?" /></form></td>*@
                    <NavLink href="@($"edit/{expense.Id}")" Match="NavLinkMatch.All">Edit</NavLink>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Expense> _expenses;

    protected override async Task OnInitializedAsync() =>
        _expenses =
            await Http.GetJsonAsync<List<Expense>>("http://localhost:7071/api/GetExpenses?account=Current");

    async Task Delete(Expense expense)
    {
        var result = await Http.DeleteAsync($"http://localhost:7071/api/{Constants.DeleteExpense}?account={expense.Account}&id={expense.Id}");

        if(result.IsSuccessStatusCode)
            _expenses.Remove(expense);
    }
}
